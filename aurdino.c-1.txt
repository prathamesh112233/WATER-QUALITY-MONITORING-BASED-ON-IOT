// Include the libraries we need
#include <OneWire.h>
#include <DallasTemperature.h>

#include <LiquidCrystal.h>
LiquidCrystal lcd(2, 3, 4, 5, 6, 7);   //RS,EN,D4,D5,D6,D7

#include <SoftwareSerial.h>
SoftwareSerial espSerial =  SoftwareSerial(0, 1);
String apiKey = "FJ4CW3QSXMQI0N5B";     // replace with your channel's thingspeak WRITE API key
String ssid = "DEMO";  // Wifi network SSID
String password = "DEMO123456"; // Wifi network password
boolean DEBUG = true;
int W, d;

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS A3

// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);

// arrays to hold device address
DeviceAddress insideThermometer;

const int bzr = 12;

float tempC;

unsigned long int avgval;
float calibration_value = 21.34;
float b;
float p;
float ph_act;
int buffer_arr[10], temp;
const int soil = A4;
int soil1 = 0;
int a1 = 0;
int b1 = 0;

int turb = 0;
float turbudity = 0;

/*
   Setup function. Here we do the basics
*/
void setup(void)
{
  // start //Serial port
  //Serial.begin(9600);
  //Serial.println("Dallas Temperature IC Control Library Demo");

  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("WATER QUALITY  ");
  lcd.setCursor(4, 1);
  lcd.print("MONITORING . IOT");
  pinMode(bzr, OUTPUT);
  digitalWrite(bzr, LOW);

  // locate devices on the bus
  //Serial.print("Locating devices...");
  sensors.begin();
  //Serial.print("Found ");
  //Serial.print(sensors.getDeviceCount(), DEC);
  //Serial.println(" devices.");

  // report parasite power requirements
  //Serial.print("Parasite power is: ");
  if (sensors.isParasitePowerMode()) ;//Serial.println("ON");
  // else //Serial.println("OFF");

  // Assign address manually. The addresses below will beed to be changed
  // to valid device addresses on your bus. Device address can be retrieved
  // by using either oneWire.search(deviceAddress) or individually via
  // sensors.getAddress(deviceAddress, index)
  // Note that you will need to use your specific address here
  //insideThermometer = { 0x28, 0x1D, 0x39, 0x31, 0x2, 0x0, 0x0, 0xF0 };

  // Method 1:
  // Search for devices on the bus and assign based on an index. Ideally,
  // you would do this to initially discover addresses on the bus and then
  // use those addresses and manually assign them (see above) once you know
  // the devices on your bus (and assuming they don't change).
  if (!sensors.getAddress(insideThermometer, 0)) //Serial.println("Unable to find address for Device 0");

    // method 2: search()
    // search() looks for the next device. Returns 1 if a new address has been
    // returned. A zero might mean that the bus is shorted, there are no devices,
    // or you have already retrieved all of them. It might be a good idea to
    // check the CRC to make sure you didn't get garbage. The order is
    // deterministic. You will always get the same devices in the same order
    //
    // Must be called before search()
    //oneWire.reset_search();
    // assigns the first address found to insideThermometer
    //if (!oneWire.search(insideThermometer)) //Serial.println("Unable to find address for insideThermometer");

    // show the addresses we found on the bus
    //Serial.print("Device 0 Address: ");
    printAddress(insideThermometer);
  //Serial.println();

  // set the resolution to 9 bit (Each Dallas/Maxim device is capable of several different resolutions)
  sensors.setResolution(insideThermometer, 9);

  //Serial.print("Device 0 Resolution: ");
  //Serial.print(sensors.getResolution(insideThermometer), DEC);
  //Serial.println();

  delay (1000);
  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print("CONNECTING WI-FI");


  espSerial.begin(9600);  // enable software serial
  espSerial.println("AT+CWMODE=1");   // set esp8266 as client
  showResponse(3000);

  espSerial.println("AT+CWJAP=\"" + ssid + "\",\"" + password + "\""); // set your home router SSID and password
  showResponse(8000);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WI-FI CONNECTED");
  delay(1500);

}

//========================================================== showResponce
void showResponse(int waitTime)
{
  long t = millis();
  char c;
  while (t + waitTime > millis())
  {
    if (espSerial.available())
    {
      c = espSerial.read();
      //  if (DEBUG) //Serial.print(c);
    }
  }

}

//========================================================================
boolean thingSpeakWrite(float value1, float value2, float value3)
{
  String cmd = "AT+CIPSTART=\"TCP\",\"";                  // TCP connection
  cmd += "184.106.153.149";                               // api.thingspeak.com
  cmd += "\",80";
  espSerial.println(cmd);
  if (DEBUG) //Serial.println(cmd);
    if (espSerial.find("Error")) {
      if (DEBUG) //Serial.println("AT+CIPSTART error");
        return false;
    }
  String getStr = "GET /update?api_key=";   // prepare GET string
  getStr += apiKey;

  getStr += "&field1=";
  getStr += String(value1);
  getStr += "&field2=";
  getStr += String(value2);
  getStr += "&field3=";
  getStr += String(value3);

  getStr += "\r\n\r\n";

  // send data length
  cmd = "AT+CIPSEND=";
  cmd += String(getStr.length());
  espSerial.println(cmd);

  if (DEBUG)  //Serial.println(cmd);

    delay(100);
  if (espSerial.find(">")) {
    espSerial.print(getStr);
    // if (DEBUG)  //Serial.print(getStr);
  }
  else {
    espSerial.println("AT+CIPCLOSE");
    // alert user
    if (DEBUG)   //Serial.println("AT+CIPCLOSE");
      return false;
  }
  return true;
}




void data()
{



  thingSpeakWrite(ph_act, turbudity, tempC); // Write values to thingspeak

  // delay(16000);
}


// function to print the temperature for a device
void printTemperature(DeviceAddress deviceAddress)
{
  // method 1 - slower
  ////Serial.print("Temp C: ");
  ////Serial.print(sensors.getTempC(deviceAddress));
  ////Serial.print(" Temp F: ");
  ////Serial.print(sensors.getTempF(deviceAddress)); // Makes a second call to getTempC and then converts to Fahrenheit

  // method 2 - faster
  tempC = sensors.getTempC(deviceAddress);
  if (tempC == DEVICE_DISCONNECTED_C)
  {
    //Serial.println("Error: Could not read temperature data");
    return;
  }.
  //Serial.print("Temp C: ");
  //Serial.print(tempC);
  //Serial.print(" Temp F: ");
  //Serial.println(DallasTemperature::toFahrenheit(tempC)); // Converts tempC to Fahrenheit
}
/*
   Main function. It will request the tempC from the sensors and display on //Serial.
*/
void loop(void)
{


  // READ PH  ...................................................................
  for (int i = 0; i < 10; i++)
  {
    buffer_arr[i] = analogRead(A5);
    delay(30);
  }
  for (int i = 0; i < 9; i++)
  {
    for (int j = i + 1; j < 10; j++)
    {
      if (buffer_arr[i] > buffer_arr[j])
      {
        temp = buffer_arr[i];
        buffer_arr[i] = buffer_arr[j];
        buffer_arr[j] = temp;
      }
    }
  }
  avgval = 0;
  for (int i = 2; i < 8; i++)
    avgval += buffer_arr[i];
  float volt = (float)avgval * 5.0 / 1024 / 6;
  ph_act = -5.70 * volt + calibration_value;

  lcd.setCursor(0, 0);
  lcd.print("PH=");
  lcd.print(ph_act);



  //READ turbudity ......................................................

  turb = analogRead(A1);

  turbudity = turb * 0.01464;
  lcd.setCursor(8, 0);
  lcd.print(" tb=");
  lcd.print(turbudity);

  //READ temperature ......................................................

  // call sensors.requestTemperatures() to issue a global temperature
  // request to all devices on the bus
  //Serial.print("Requesting temperatures...");
  sensors.requestTemperatures(); // Send the command to get temperatures
  //Serial.println("DONE");

  // It responds almost immediately. Let's print out the data


  printTemperature(insideThermometer); // Use a simple function to print out the data
  lcd.setCursor(0, 1);
  lcd.print("T=");
  lcd.print(tempC);

  if (tempC > 40 || turbudity < 4)
  {
    digitalWrite(bzr, HIGH);
    lcd.setCursor(8, 1);
    lcd.print("CHECK-----");
  }
  else
  {
    digitalWrite(bzr, LOW);
    lcd.setCursor(8, 1);
    lcd.print("-----------");
  }





  // -------IOT WRITE---------------
  if (W > 20)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Uploading.....");
    delay(1000);

    data();
    W = 0;
    lcd.clear();
  }
  W++;
  delay(1000);
}

// function to print a device address
void printAddress(DeviceAddress deviceAddress)
{
  for (uint8_t i = 0; i < 8; i++)
  {
    if (deviceAddress[i] < 16) ;//Serial.print("0");
    //Serial.print(deviceAddress[i], HEX);
  }
}
